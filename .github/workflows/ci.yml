name: CI

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 12 * * *'

jobs:
  test:
    permissions:
      # Needed to access the workflow's OIDC identity.
      id-token: write
    strategy:
      matrix:
        conf:
          - { py: "3.7", os: "ubuntu-latest" }
          - { py: "3.8", os: "ubuntu-latest" }
          - { py: "3.9", os: "ubuntu-latest" }
          - { py: "3.10", os: "ubuntu-latest" }
          - { py: "3.11", os: "ubuntu-latest" }
          # NOTE: We only test Windows and macOS on the latest Python;
          # these primarily exist to ensure that we don't accidentally
          # introduce Linux-isms into the development tooling.
          - { py: "3.11", os: "windows-latest" }
          - { py: "3.11", os: "macos-latest" }
    runs-on: ${{ matrix.conf.os }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
        with:
          python-version: ${{ matrix.conf.py }}
          cache: "pip"
          cache-dependency-path: pyproject.toml

      - name: deps
        run: make dev SIGSTORE_EXTRA=test

      - name: test
        run: make test TEST_ARGS="-vv --showlocals"

      - name: test (offline)
        if: matrix.conf.os == 'ubuntu-latest'
        run: |
          # We use `unshare` to "un-share" the default networking namespace,
          # in effect running the tests as if the host is offline.
          # This in turn effectively exercises the correctness of our
          # "online-only" test markers, since any test that's online
          # but not marked as such will fail.
          unshare --map-root-user --net make test TEST_ARGS="--skip-online -vv --showlocals"

  all-tests-pass:
    if: always()

    needs:
    - test

    runs-on: ubuntu-latest

    steps:
      - name: check test jobs
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}
      - uses: ./.github/actions/upload-coverage

  coverage:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
      - name: setup python
      - uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: '3.10'
      - run: pip install coverage[toml]
      - name: download coverage data
        uses: actions/download-artifact@v3.0.2
        with:
          name: coverage-data
      - name: combine coverage data
        id: combinecoverage
        run: |
          set +e
          python -m coverage combine
          echo "## python coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          python -m coverage report -m
          echo '```' >> $GITHUB_STEP_SUMMARY
